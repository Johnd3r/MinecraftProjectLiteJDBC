spring.application.name=gildbc
spring.output.ansi.enabled=always

# Spring Data JDBC
spring.datasource.url=jdbc:mysql://localhost:3306/minecraftdbclite
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver


# Thymeleaf
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html

# SCRIPT SQL
# CREATE DATABASE IF NOT EXISTS minecraftdbclite;
# USE minecraftdbclite;

# -- Tabla Jugador (A)
# CREATE TABLE jugador (
#     idJugador BIGINT PRIMARY KEY AUTO_INCREMENT,
#     nombre VARCHAR(100) NOT NULL,
#     nivel INT NOT NULL,
#     experiencia FLOAT NOT NULL,
#     tipoJugador ENUM('EXPLORADOR', 'CONSTRUCTOR', 'GUERRERO') NOT NULL
# );

# -- Tabla Mision (B) - uno a uno con Jugador
# CREATE TABLE mision (
#     idMision BIGINT PRIMARY KEY AUTO_INCREMENT,
#     titulo VARCHAR(150) NOT NULL,
#     dificultad ENUM('FACIL', 'MEDIA', 'DIFICIL') NOT NULL,
#     recompensaXP INT NOT NULL,
#     estadoMision ENUM('PENDIENTE', 'EN_PROGRESO', 'COMPLETADA') NOT NULL,
#     idJugador BIGINT UNIQUE,
#     FOREIGN KEY (idJugador) REFERENCES jugador(idJugador)
# );

# -- Tabla Logro (C) - uno a muchos con Jugador
# CREATE TABLE logro (
#     idLogro BIGINT PRIMARY KEY AUTO_INCREMENT,
#     nombre VARCHAR(150) NOT NULL,
#     tipo ENUM('COMBATE', 'EXPLORACION', 'RECOLECCION', 'HISTORIA') NOT NULL,
#     fecha DATE NOT NULL,
#     puntos INT NOT NULL,
#     idJugador BIGINT,
#     FOREIGN KEY (idJugador) REFERENCES jugador(idJugador)
# );

# -- Tabla Enemigo (D)
# CREATE TABLE enemigo (
#     idEnemigo BIGINT PRIMARY KEY AUTO_INCREMENT,
#     nombre VARCHAR(100) NOT NULL,
#     tipo ENUM('HOSTIL', 'NEUTRAL', 'BOSS') NOT NULL,
#     vida INT NOT NULL,
#     poder INT NOT NULL,
#     estado ENUM('ACTIVO', 'DERROTADO', 'DESAPARECIDO') NOT NULL
# );

# -- Tabla intermedia Mision_Enemigo (relaci√≥n muchos a muchos entre B y D)
# CREATE TABLE misionEnemigo (
#     idMision BIGINT,
#     idEnemigo BIGINT,
#     cantidad INT NOT NULL,
#     PRIMARY KEY (idMision, idEnemigo),
#     FOREIGN KEY (idMision) REFERENCES mision(idMision),
#     FOREIGN KEY (idEnemigo) REFERENCES enemigo(idEnemigo)
# );